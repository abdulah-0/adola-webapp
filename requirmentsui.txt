Here's a React Native (Expo) UI requirements document tailored to your tech stack (Expo, React Native, Supabase) based on your design:

### React Native UI Requirements Document
**Tech Stack**: Expo, React Native, Supabase  
**Objective**: Recreate UI from Container.jpg without modifying existing functionality  

---

### Global Requirements
1. **Layout Components**:
   - Use `ScrollView` as root container
   - `View` components for sections with `marginVertical: 16`
   - `StyleSheet.create` for all styles
   - Max width: `Dimensions.get('window').width * 0.9`

2. **Typography**:
   - Heading 1: `fontSize: 24, fontWeight: 'bold'`
   - Heading 2: `fontSize: 20, fontWeight: 'bold'`
   - Heading 3: `fontSize: 18, fontWeight: 'bold'`
   - Body: `fontSize: 16`
   - Bold text: `<Text style={{fontWeight: 'bold'}}>`

3. **Spacing**:
   - Section spacing: `marginVertical: 16`
   - Internal padding: `padding: 12`
   - Horizontal rules: `<View style={{height: 1, backgroundColor: '#ccc', marginVertical: 8}}>`

4. **Color Scheme**:
   - Use existing app color variables
   - Default text: `'#333'`
   - Background: `'#fff'`

---

### Component Specifications

#### 1. Hero Section Component
```jsx
const HeroSection = () => (
  <View>
    <Text style={styles.h1}>Section</Text>
    <Text style={styles.h2}>305 Side bonus</Text>
    <Text style={styles.h3}>30% slots bonus up to €100</Text>
    <Button 
      title="Create in Account" 
      onPress={() => {}} 
      style={styles.button} // Use existing button styles
    />
    <Divider />
  </View>
);
```

#### 2. Game Categories Component
```jsx
const GameCategories = () => (
  <View>
    <Text style={styles.h3}>Sports</Text>
    {['Slices', 'Slots', 'Roulette', 'Blackjack'].map((item, index) => (
      <Text key={index} style={styles.listItem}>
        <Text style={styles.bold}>{item}</Text>
      </Text>
    ))}
    <Divider />
  </View>
);
```

#### 3. Featured Games Component
```jsx
const FeaturedGames = () => (
  <View>
    <Text style={styles.h3}>My Game</Text>
    {['Top Games', 'SIGKE', 'DONANZA', 'CUPERO', 'SCUFFER', 'MOTOR', 'GOLDEN', 'POPLASSIONALITY'].map((game, index) => (
      <Text key={index} style={styles.listItem}>
        <Text style={styles.bold}>{game}</Text>
      </Text>
    ))}
    <Divider />
  </View>
);
```

#### 4. Promo Banner Component
```jsx
const PromoBanner = () => (
  <View style={styles.promoContainer}>
    <Text style={styles.h2}>CASHBACK</Text>
    <Text style={[styles.bold, {fontSize: 18}]}>UP TO 50%</Text>
    <Divider />
  </View>
);
```

#### 5. Game Tables Component
```jsx
const GameTable = ({ title, headers, data }) => (
  <View>
    <Text style={styles.h3}>{title}</Text>
    <View style={styles.table}>
      {/* Header Row */}
      <View style={styles.tableRow}>
        {headers.map((header, index) => (
          <Text key={index} style={[styles.tableHeader, styles.bold]}>
            {header}
          </Text>
        ))}
      </View>
      
      {/* Data Rows */}
      {data.map((row, rowIndex) => (
        <View key={rowIndex} style={styles.tableRow}>
          {row.map((cell, cellIndex) => (
            <Text key={cellIndex} style={styles.tableCell}>
              {cell}
            </Text>
          ))}
        </View>
      ))}
    </View>
    <Divider />
  </View>
);

// Usage example
<GameTable 
  title="49 games"
  headers={["SIZE", "SKILL", "PROBLEMS", "TECHNOLOGY"]}
  data={[["DONANZA", "SUFFER", "REALIZED", "BARRIET"]]}
/>
```

#### 6. Footer Component
```jsx
const FooterSection = () => (
  <View>
    <Text style={styles.h3}>Mediums</Text>
    <Text style={styles.bold}>Maintenance:</Text>
    <View style={styles.listContainer}>
      <Text style={styles.listItem}><Text style={styles.bold}>Aduse:</Text></Text>
      <Text style={styles.listItem}><Text style={styles.bold}>Tasks:</Text></Text>
    </View>
    
    <GameTable
      headers={["Requests", "Points", "About us"]}
      data={[
        ["FAQ", "Promotion", "TAC"],
        ["Legend:", "Summaries", "Partridge"],
        ["No. of", "Volume", "Securities"],
        ["Albums:", "-", "-"],
        ["€", "-", "-"],
        ["€", "-", "-"]
      ]}
    />
  </View>
);
```

---

### Implementation Guidelines
1. **Component Structure**:
   - Create separate components for each section
   - Use functional components with TypeScript interfaces
   - Wrap new UI in a `<SafeAreaView>` container

2. **Styling Approach**:
```typescript
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  h1: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  h2: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  h3: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  bold: {
    fontWeight: 'bold',
  },
  listItem: {
    marginVertical: 4,
  },
  table: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 4,
    marginTop: 8,
  },
  tableRow: {
    flexDirection: 'row',
    borderBottomWidth: 1,
    borderColor: '#eee',
  },
  tableHeader: {
    flex: 1,
    padding: 12,
    backgroundColor: '#f9f9f9',
  },
  tableCell: {
    flex: 1,
    padding: 12,
  },
  divider: {
    height: 1,
    backgroundColor: '#ccc',
    marginVertical: 16,
  }
});
```

3. **Supabase Integration**:
   - Fetch data using Supabase client:
   ```typescript
   const fetchGameData = async () => {
     const { data, error } = await supabase
       .from('games')
       .select('*');
     if (error) console.error(error);
     return data;
   };
   ```
   - Use React Query for data fetching/caching

4. **Responsiveness**:
   - Use `Dimensions.get('window')` for responsive values
   - Implement horizontal scrolling for tables:
   ```jsx
   <ScrollView horizontal={true}>
       <GameTable {...props} />
   </ScrollView>
   ```

5. **Existing Functionality Protection**:
   - Create new screen/routes for this UI
   - Use feature flagging for gradual rollout:
   ```jsx
   const showNewUI = useFeatureFlag('new_ui_enabled');
   return showNewUI ? <NewUIComponent /> : <OldComponent />;
   ```

---

### Delivery Requirements
1. **Component Files**:
   - `/components/HeroSection.tsx`
   - `/components/GameTables.tsx`
   - `/components/PromoBanner.tsx`

2. **TypeScript Interfaces**:
```typescript
interface GameTableProps {
  title: string;
  headers: string[];
  data: string[][];
}
```

3. **Responsive Hook**:
```typescript
// hooks/useResponsive.ts
import { Dimensions, ScaledSize } from 'react-native';

export const useResponsive = () => {
  const [dimensions, setDimensions] = useState(Dimensions.get('window'));

  useEffect(() => {
    const subscription = Dimensions.addEventListener('change', ({ window }) => {
      setDimensions(window);
    });
    return () => subscription?.remove();
  }, []);

  return {
    isSmallScreen: dimensions.width < 375,
    isMediumScreen: dimensions.width >= 375 && dimensions.width < 768,
    isLargeScreen: dimensions.width >= 768,
    dimensions
  };
};
```

4. **Testing Requirements**:
   - Jest unit tests for all components
   - Detox end-to-end tests for UI flows
   - Visual regression testing with Percy

This implementation maintains your existing tech stack conventions and ensures no disruption to current functionality. All components are designed to work with Expo's styling system and can easily integrate with your Supabase backend.