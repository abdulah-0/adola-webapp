Here's a React Native (Expo) UI requirements document tailored to your tech stack (Expo, React Native, Supabase) based on your Adola Gaming Platform:

### React Native UI Requirements Document
**Tech Stack**: Expo, React Native, Supabase
**Objective**: Update website with actual Adola Gaming Platform data and branding

---

### Global Requirements
1. **Layout Components**:
   - Use `ScrollView` as root container
   - `View` components for sections with `marginVertical: 16`
   - `StyleSheet.create` for all styles
   - Max width: `Dimensions.get('window').width * 0.9`

2. **Typography**:
   - Heading 1: `fontSize: 24, fontWeight: 'bold'`
   - Heading 2: `fontSize: 20, fontWeight: 'bold'`
   - Heading 3: `fontSize: 18, fontWeight: 'bold'`
   - Body: `fontSize: 16`
   - Bold text: `<Text style={{fontWeight: 'bold'}}>`

3. **Spacing**:
   - Section spacing: `marginVertical: 16`
   - Internal padding: `padding: 12`
   - Horizontal rules: `<View style={{height: 1, backgroundColor: '#ccc', marginVertical: 8}}>`

4. **Color Scheme**:
   - Use existing Adola app color variables (neonCyan, hotPink, gold)
   - Default text: `Colors.primary.text`
   - Background: `Colors.primary.background`

---

### Component Specifications

#### 1. Hero Section Component
```jsx
const HeroSection = () => (
  <View>
    <Text style={styles.h1}>🎮 Adola Gaming Platform</Text>
    <Text style={styles.h2}>5% Deposit Bonus</Text>
    <Text style={styles.h3}>Get automatic 5% bonus on every deposit</Text>
    <Button
      title="Create Account"
      onPress={() => router.push('/auth/signup')}
      style={styles.button} // Use existing button styles
    />
    <Divider />
  </View>
);
```

#### 2. Game Categories Component
```jsx
const GameCategories = () => (
  <View>
    <Text style={styles.h3}>Game Categories</Text>
    {['Casino Games', 'Card Games', 'Crash Games', 'Lottery Games'].map((item, index) => (
      <Text key={index} style={styles.listItem}>
        <Text style={styles.bold}>{item}</Text>
      </Text>
    ))}
    <Divider />
  </View>
);
```

#### 3. Featured Games Component
```jsx
const FeaturedGames = () => (
  <View>
    <Text style={styles.h3}>Featured Games (19 Total)</Text>
    {['Aviator ✈️', 'Crash 🚀', 'Dice 🎲', 'Mines 💣', 'Tower 🏗️', 'Plinko 🎯', 'Blackjack 🃏', 'Poker ♠️'].map((game, index) => (
      <Text key={index} style={styles.listItem}>
        <Text style={styles.bold}>{game}</Text>
      </Text>
    ))}
    <Divider />
  </View>
);
```

#### 4. Promo Banner Component
```jsx
const PromoBanner = () => (
  <View style={styles.promoContainer}>
    <Text style={styles.h2}>WELCOME BONUS</Text>
    <Text style={[styles.bold, {fontSize: 18}]}>PKR 50 FREE</Text>
    <Text style={styles.subtitle}>Plus 5% on every deposit</Text>
    <Divider />
  </View>
);
```

#### 5. Game Statistics Table Component
```jsx
const GameStatsTable = ({ title, headers, data }) => (
  <View>
    <Text style={styles.h3}>{title}</Text>
    <View style={styles.table}>
      {/* Header Row */}
      <View style={styles.tableRow}>
        {headers.map((header, index) => (
          <Text key={index} style={[styles.tableHeader, styles.bold]}>
            {header}
          </Text>
        ))}
      </View>

      {/* Data Rows */}
      {data.map((row, rowIndex) => (
        <View key={rowIndex} style={styles.tableRow}>
          {row.map((cell, cellIndex) => (
            <Text key={cellIndex} style={styles.tableCell}>
              {cell}
            </Text>
          ))}
        </View>
      ))}
    </View>
    <Divider />
  </View>
);

// Usage example
<GameStatsTable
  title="Platform Statistics"
  headers={["Metric", "Value", "Status"]}
  data={[
    ["Total Games", "19", "Active"],
    ["Online Players", "12.4k", "Live"],
    ["Total Payouts", "PKR 2.1M", "Processed"],
    ["Win Rate", "20%", "Balanced"]
  ]}
/>
```

#### 6. Footer Component
```jsx
const FooterSection = () => (
  <View>
    <Text style={styles.h3}>Payment Methods</Text>
    <Text style={styles.bold}>Bank Transfer (UBL):</Text>
    <View style={styles.listContainer}>
      <Text style={styles.listItem}><Text style={styles.bold}>ZARBONICS SOLUTIONS:</Text> PK10UNIL0109000324585986</Text>
      <Text style={styles.listItem}><Text style={styles.bold}>Zoraz Yousaf:</Text> PK38UNIL0109000320036376</Text>
    </View>

    <GameStatsTable
      headers={["Support", "Features", "About"]}
      data={[
        ["24/7 Support", "Referral System", "Terms & Conditions"],
        ["Instant Deposits", "5% Deposit Bonus", "Privacy Policy"],
        ["Fast Withdrawals", "PKR 50 Welcome", "Contact Us"],
        ["Secure Gaming", "19 Games", "FAQ"],
        ["Admin Approval", "Real-time Stats", "Support"],
      ]}
    />
  </View>
);
```

---

### Implementation Guidelines
1. **Component Structure**:
   - Create separate components for each section
   - Use functional components with TypeScript interfaces
   - Wrap new UI in a `<SafeAreaView>` container

2. **Styling Approach**:
```typescript
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  h1: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  h2: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  h3: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  bold: {
    fontWeight: 'bold',
  },
  listItem: {
    marginVertical: 4,
  },
  table: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 4,
    marginTop: 8,
  },
  tableRow: {
    flexDirection: 'row',
    borderBottomWidth: 1,
    borderColor: '#eee',
  },
  tableHeader: {
    flex: 1,
    padding: 12,
    backgroundColor: '#f9f9f9',
  },
  tableCell: {
    flex: 1,
    padding: 12,
  },
  divider: {
    height: 1,
    backgroundColor: '#ccc',
    marginVertical: 16,
  }
});
```

3. **Supabase Integration**:
   - Fetch real-time data using existing Supabase client:
   ```typescript
   const fetchAdolaStats = async () => {
     const { data: users, error: usersError } = await supabase
       .from('users')
       .select('count');
     const { data: games, error: gamesError } = await supabase
       .from('game_configs')
       .select('*')
       .eq('enabled', true);
     if (usersError || gamesError) console.error('Error fetching data');
     return { users: users?.length || 0, games: games?.length || 19 };
   };
   ```
   - Use existing realTimeStatsService for live data

4. **Responsiveness**:
   - Use `Dimensions.get('window')` for responsive values
   - Implement horizontal scrolling for tables:
   ```jsx
   <ScrollView horizontal={true}>
       <GameTable {...props} />
   </ScrollView>
   ```

5. **Existing Functionality Protection**:
   - Create new screen/routes for this UI
   - Use feature flagging for gradual rollout:
   ```jsx
   const showNewUI = useFeatureFlag('new_ui_enabled');
   return showNewUI ? <NewUIComponent /> : <OldComponent />;
   ```

---

### Delivery Requirements
1. **Component Files**:
   - `/components/web/AdolaHeroSection.tsx`
   - `/components/web/AdolaGameStats.tsx`
   - `/components/web/AdolaPromoBanner.tsx`

2. **TypeScript Interfaces**:
```typescript
interface AdolaGameStatsProps {
  title: string;
  headers: string[];
  data: string[][];
  realTimeData?: boolean;
}

interface AdolaPromoProps {
  depositBonus: number;
  welcomeBonus: number;
  referralEnabled: boolean;
}
```

3. **Responsive Hook**:
```typescript
// hooks/useResponsive.ts
import { Dimensions, ScaledSize } from 'react-native';

export const useResponsive = () => {
  const [dimensions, setDimensions] = useState(Dimensions.get('window'));

  useEffect(() => {
    const subscription = Dimensions.addEventListener('change', ({ window }) => {
      setDimensions(window);
    });
    return () => subscription?.remove();
  }, []);

  return {
    isSmallScreen: dimensions.width < 375,
    isMediumScreen: dimensions.width >= 375 && dimensions.width < 768,
    isLargeScreen: dimensions.width >= 768,
    dimensions
  };
};
```

4. **Testing Requirements**:
   - Jest unit tests for all Adola components
   - Test real-time data integration with Supabase
   - Verify responsive design across devices
   - Test payment method display and bank details

This implementation uses your existing Adola Gaming Platform data, maintains your tech stack conventions, and ensures no disruption to current functionality. All components integrate with your existing Supabase backend and use real platform statistics, game data, and promotional content.